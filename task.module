<?php

/**
 * @file
 * Contains task.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\task\TaskUtilities;
use Drupal\task\Entity\Task;
use Drupal\task\Entity\TaskType;

/**
 * Implements hook_help().
 */
function task_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the task module.
    case 'help.page.task':
      $output = '';
      $output .= '<h2>' . t('Task') . '</h2>';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Task allows users to create and assign tasks') . '</p>';
      $output .= '<h3>' . t('Roadmap Version 1') . '</h3>';
      $output .= '<p>' . t('
<h3>Entity Types</h3>
The Task will have the following entities:<br>

<h5>Content Entities</h5>
<ul>
<li><b>Task:</b> These are assignable, schedulable entities that allow either for a queue of items for execution (i.e. simplified way to add items to the Queue API), or for giving assignments.</li>
<li><b>Task Notes:</b> These are attached to tasks as information concerning the task. One example case would be time tracking, and logging work on a task.</li>
<li><b>Task Templates:</b> These contain pre-configured tasks, such that most of the information is auto-filled.</li>
</ul>
Both tasks and templates may have child items. In the case of templates, child items are used to construct a set of tasks.<br>

<h5>Config Entities</h5>
<ul>
<li><b>Task Statuses:</b> These are statuses that may be set for a task. There will be an option to choose which task/template bundles may use a status. The module will ship with \'active\' and \'closed,\' with \'closed\' being forced to be available for all types.</li>
<li><b>Task Closure Reasons:</b> These are options for explaining how a task was closed. The module will ship with \'completed,\' \'dismissed,\' and \'expired.\'</li>
</ul>
<h4>Data structure for tasks and templates</h4>
<b>Tasks</b><br>
<i>Note: Tasks do not have authorship fields.</i><br>

<i>Also Note: For assigned by/to , if the Entity ID is set, but type isn\'t, the system will assume the entity type is "user." Both must be blank for system tasks.</i><br>

<uL>
<li><b>Parent_task:</b> The parent task, if this a a sub-task.</li>
<li><b>assigned_by_type:</b> Entity type of the assigner. Typically a user, or blank for system-generated tasks</li>
<li><b>assigned_by:</b> Entity ID of the assigner, or blank for system-generated tasks</li>
<li><b>assigned_to_type:</b> Entity type of the assignee. Typically a user, or blank for system tasks</li>
<li><b>assigned_to:</b> Entity ID of the assignee, or blank for system tasks</li>
<li><b>due_date:</b> If assigned to an entity, this is the "due date" that will display. This is not used by system tasks.</li>
<li><b>status:</b> The current status of a task.</li>
<li><b>expire_date:</b> This is an "expiration date" that will force-close the task. For system tasks, this is also the date at which the action should be executed.</li>
<li><b>close_date:</b> The date the task was closed.</li>
<li><b>close_type:</b> A string representing the reason the task was closed. We will make reasons a config entity.</li>
<li><b>task_data:</b> This is a freeform serialized array, to be used by custom plugins.</li>
</uL>
<h5>Task Notes</h5>
<i>Note: These are in addition to typical authorship fields (i.e. author and create date). Also, this is a fieldable entity, so most of the functionality will come from the Field API.</i>
<ul>
<li><b>task:</b> The task to which this note is attached.</li>
</ul>
<h5>Task Templates</h5>
<i>Note: These are in addition to typical authorship fields (i.e. author and create date).</i>

<ul>
<li><b>parent_template:</b> The parent template, if this a a sub-template. When a parent template is created, all children are also created.</li>
<li><b>Pre-populated fields for the task:</b> some fields may be pre-populated, otherwise you may use an annotation plugin to populate fields at the time of task creation.</li>
    <ul>
    <li>assigned_by_type</li>
    <li>assigned_by</li>
    <li>assigned_to_type</li>
    <li>assigned_to</li>
    <li>status</li>
    </ul>
<li><b>due_date_type:</b> May be \'fixed,\' \'relative to create date,\' or \'relative to fixed date.\'</li>
<li><b>due_date_relative_to_fixed:</b> The relative amount of time in seconds, only for "relative to fixed date"</li>
<li><b>due_date:</b> May be a fixed due date, the fixed date for calculating the relative due date (relative to fixed date), a textual relative date i.e. \'+2 days\' (relative to create date), or a relative amount of time in seconds (relative to create date).</li>
<li><b>expire_date_type:</b> May be \'fixed,\' \'relative to create date,\' or \'relative to fixed date.\'</li>
<li><b>expire_date_relative_to_fixed:</b> The relative amount of time in seconds, only for "relative to fixed date"</li>
<li><b>expire_date:</b> May be a fixed expire date, the fixed date for calculating the relative due date (relative to fixed date), a textual relative date i.e. \'+2 days\' (relative to create date), or a relative amount of time in seconds (relative to create date).</li>
</ul>
<h4>Plugin System</h4>
Tasks will be fieldable entities with bundles, with each bundle being meant for different specific workflows. A given bundle should also have a corresponding plugin, maybe we can call the annotation and this will specify actions associated with tasks, which fields/options are exposed, and how the module behaves in terms of cron runs or queue operations. We will also have selectable actions through a plugin.
<br>
Based on this, we will make the following annotation plugins:
<ul>
<li><b>@TaskAction:</b> Selectable actions for either tasks or templates. Each bundle may specify which actions it would like to use (or leave blank for all). and the Task Action may limit which bundles it is available to.</li>
<li><b>@TaskBundle:</b> Specify the task post-creation and closing actions for a given bundle, i.e. gathering data on opening the task, sending email on closing, etc.</li>
<li><b>@TaskTemplateBundle:</b> Specify the "create task from template" action per bundle.</li> 
</ul>     
      ') . '</p>';

      return $output;

    default:
  }
}

/**
 * Implements hook_mail().
 */
function task_mail($key, &$message, $params) {
  $options = [
    'langcode' => $message['langcode'],
  ];
  switch ($key) {
    case 'task_mail':
      $message['from'] = $params['from'];
      $message['subject'] = $params['subject'];
      $message['body'] = $params['message'];
      break;
  }
}

/**
 * Implements hook_theme().
 */
function task_theme() {
  $theme = [];
  $theme['task'] = [
    'render element' => 'elements',
    'file' => 'task.page.inc',
    'template' => 'task',
  ];
  $theme['task_content_add_list'] = [
    'render element' => 'content',
    'variables' => ['content' => NULL],
    'file' => 'task.page.inc',
  ];
  return $theme;
}

/**
* Implements hook_theme_suggestions_HOOK().
*/
function task_theme_suggestions_task(array $variables) {
  $suggestions = [];
  $entity = $variables['elements']['#task'];
  $sanitized_view_mode = strtr($variables['elements']['#view_mode'], '.', '_');

  $suggestions[] = 'task__' . $sanitized_view_mode;
  $suggestions[] = 'task__' . $entity->bundle();
  $suggestions[] = 'task__' . $entity->bundle() . '__' . $sanitized_view_mode;
  $suggestions[] = 'task__' . $entity->id();
  $suggestions[] = 'task__' . $entity->id() . '__' . $sanitized_view_mode;
  return $suggestions;
}

/**
 * Implements hook_entity_extra_field_info() to add the view fields to relevant entities
 */
function task_entity_extra_field_info() {
  $ret = array();

  foreach (TaskType::loadMultiple() as $bundle) {
    $ret['task'][$bundle->id()]['display']['task_options'] = [
      'label' => t('Task Options'),
      'description' => t('Shows the available options for the task.'),
      'weight' => 10,
    ];
  }

  return $ret;
}

/**
 * Implements hook_ENTITY_TYPE_view().
 */
function task_task_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
  $build['task_options'] = TaskUtilities::getTaskOptions($entity);
}

/**
 * Implements hook_cron().
 */
function task_cron() {
  $query = \Drupal::entityQuery('task');
  $query->condition('status', 'closed', '<>');
  $query->condition('expire_date', time(), '<');
  $result = $query->execute();

  $plugin_manager = \Drupal::service('plugin.manager.task_bundle');
  $plugin_definitions = $plugin_manager->getDefinitions();

  foreach ($result as $revision_id => $task_id) {
    $task = Task::load($task_id);
    $bundle = $task->bundle();
    if (isset($plugin_definitions[$bundle]['class']) && method_exists($plugin_definitions[$bundle]['class'],'expireTask')) {
      $plugin_definitions[$bundle]['class']::expireTask($task);
    }
  }
}
